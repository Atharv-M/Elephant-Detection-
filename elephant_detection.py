# -*- coding: utf-8 -*-
"""Elephant Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cprKm0gPb5N7Fzgf4JX0dKuUxER-ctEw

üêò Elephant Detection Using Open CV
"""

from google.colab import drive
drive.mount('/content/drive')

"""Load the Image of the Elephant"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
path="elephant.jpg"
image=cv2.imread(path)
img_rgb=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)

plt.figure(figsize=(10,8))
plt.imshow(img_rgb)
plt.title("Original Elephant Image (RGB)")
plt.axis("on")
plt.show()

print("Image Shape",img_rgb.shape)

# Dependencies
!pip install ipyevents ipywidgets
from google.colab import output
output.enable_custom_widget_manager()



import cv2
import numpy as np
import ipywidgets as widgets
from IPython.display import display
from ipyevents import Event
from PIL import Image
from io import BytesIO


image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Convert full-size image to PNG bytes
def array_to_png_bytes(arr):
    img_pil = Image.fromarray(arr)
    with BytesIO() as output_bytes:
        img_pil.save(output_bytes, format='PNG')
        return output_bytes.getvalue()

# Create image widget with original size
height, width, _ = image_rgb.shape
png_bytes = array_to_png_bytes(image_rgb)

image_widget = widgets.Image(
    value=png_bytes,
    format='png',
    layout=widgets.Layout(width=f"{width}px", height=f"{height}px")
)
display(image_widget)

# Setup event handler for clicks
event = Event(source=image_widget, watched_events=['click'])

def handle_event(event_data):
    x = int(event_data['offsetX'])
    y = int(event_data['offsetY'])
    print(f"Clicked at: X={x}, Y={y}")

event.on_dom_event(handle_event)

sample_cordinate=[
    (283,569),
    (307,222),
    (460,315),
    (149,341),
    (287,395)




]

sample_rgb_values=[]

for cordinate in sample_cordinate:
  x ,y=cordinate
  rgb=image_rgb[x,y]
  sample_rgb_values.append(rgb)


for i in range(len(sample_cordinate)):
  cordinate=sample_cordinate[i]
  rgb=sample_rgb_values[i]
  print(f"p{i+1} at{cordinate} the rgb value is {rgb}")

# Mark Your Points in the image
image_marked= image_rgb.copy()
index=1
for i in range(len(sample_cordinate)):
  cordinate=sample_cordinate[i]
  y=cordinate[1]
  x=cordinate[0]
  cv2.circle(image_marked, (x,y), 10 ,(255,0,0),2)
  # now put some markings on the image
  cv2.putText(image_marked, f"Point {index}",(x+1,y-10), cv2.FONT_HERSHEY_PLAIN,1,(0,255,0),1)
  index+=1

plt.figure(figsize=(10, 8))
plt.imshow(image_marked)
plt.title("Marked points on GajRaj")
plt.axis("on")
plt.show()

lower_thresh=[70,70,70]
upper_thresh=[160,170,180]
height=image_rgb.shape[0]
width=image_rgb.shape[1]

elephant_detected=np.ones((height,width),dtype=np.uint8)*255
for x in range(height):
  for y in range(width):
    pixel=image_rgb[x,y]
    r,g,b=pixel[0],pixel[1],pixel[2]

    if(lower_thresh[0]<=r<=upper_thresh[0] and lower_thresh[1]<=g<=upper_thresh[1] and lower_thresh[2]<=b<=upper_thresh[2]):
      elephant_detected[x,y]=0
    else:
        elephant_detected[x,y]=255

plt.figure(figsize=(10, 8))
plt.imshow(elephant_detected,cmap='gray')
plt.title("GajRaj in Pic")
plt.axis("on")
plt.show()

